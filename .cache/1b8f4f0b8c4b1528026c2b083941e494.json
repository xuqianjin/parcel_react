{"dependencies":[],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst getByProperityChain = exports.getByProperityChain = (source, chains, defaults) => {\n  if (typeof source !== 'Object') {\n    return defaults;\n  }\n  if (!Array.isArray(chains)) {\n    throw new Error('second param must be array');\n  }\n  let _source = source;\n  for (let chain of chains) {\n    if (typeof _source[chain] !== 'undefined') {\n      _source = _source[chain];\n    } else {\n      return defaults;\n    }\n  }\n  return _source;\n};\nconst isLogin = exports.isLogin = () => {\n  let user = localStorage.getItem('user');\n  if (user && JSON.parse(user) && JSON.parse(user).token && new Date(JSON.parse(user).expired) > new Date()) return true;\n  return false;\n};\n\nconst getAuthorization = exports.getAuthorization = reducer => {\n  let _value = undefined;\n  if (reducer) _value = getByProperityChain(reducer, ['user', 'token'], undefined);\n  if (JSON.parse(localStorage.getItem('user'))) {\n    if (!_value) _value = JSON.parse(localStorage.getItem('user')).token;\n  }\n  if (!_value) return _value;\n  return 'Bearer ' + _value;\n};\n\nconst parseObjects = exports.parseObjects = objs => {\n  let tidyObject = obj => {\n    let _obj = {};\n    let keys = Object.keys(obj);\n\n    keys.forEach(key => {\n      if (!/^__/.test(key)) {\n        _obj[key] = obj[key];\n      }\n    });\n    return _obj;\n  };\n\n  let [createdIndex, created, updateds] = [-1, null, []];\n  for (let i = 0, len = objs.length; i < len; i++) {\n    let obj = objs[i];\n    if (obj.__new) {\n      createdIndex = i;\n      created = tidyObject(obj);\n    }\n    if (obj.__dirty) {\n      updateds.push(tidyObject(obj));\n    }\n  }\n  return [createdIndex, created, updateds];\n};\n\nconst mapCollectionToTypes = exports.mapCollectionToTypes = collection => collection.map(item => ({\n  id: item.id,\n  title: item.name,\n  value: item.id\n}));\n\nconst findById = exports.findById = (arr, id) => arr.filter(item => item.id === id);\n\nconst shadowDiffer = exports.shadowDiffer = (first, second, result) => {\n  let i = 0;\n  for (i in first) {\n    if (typeof first[i] === \"object\" && typeof second[i] === \"object\") {\n      result[i] = differ(first[i], second[i], {});\n      if (!result[i]) delete result[i];\n    } else if (first[i] != second[i]) {\n      result[i] = second[i];\n    }\n  }\n  return isEmpty(result) ? undefined : result;\n};\n\nconst copyObject = exports.copyObject = object => {\n  let data = {};\n  if (object) {\n    for (var variable in object) {\n      data[variable] = object[variable];\n    }\n  }\n  return data;\n};\n\nconst DX = exports.DX = n => {\n  if (!/^(0|[1-9]\\d*)(\\.\\d+)?$/.test(n)) return \"数据非法\";\n  var unit = \"千百拾亿千百拾万千百拾元角分\",\n      str = \"\";\n  n += \"00\";\n  var p = n.indexOf('.');\n  if (p >= 0) n = n.substring(0, p) + n.substr(p + 1, 2);\n  unit = unit.substr(unit.length - n.length);\n  for (var i = 0; i < n.length; i++) str += '零壹贰叁肆伍陆柒捌玖'.charAt(n.charAt(i)) + unit.charAt(i);\n  return str.replace(/零(千|百|拾|角)/g, \"零\").replace(/(零)+/g, \"零\").replace(/零(万|亿|元)/g, \"$1\").replace(/(亿)万|壹(拾)/g, \"$1$2\").replace(/^元零?|零分/g, \"\").replace(/元$/g, \"元整\");\n};"},"hash":"a345543c00231d61a9fbb169741c79c5"}