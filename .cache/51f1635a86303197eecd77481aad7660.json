{"dependencies":[{"name":"lodash/difference","loc":{"line":16,"column":26}},{"name":"lodash/union","loc":{"line":20,"column":21}},{"name":"lodash/isPlainObject","loc":{"line":24,"column":29}},{"name":"symbol-observable","loc":{"line":28,"column":32}}],"generated":{"js":"'use strict';\n\nexports.__esModule = true;\nexports.INIT_ACTION = exports.ActionCreators = exports.ActionTypes = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nexports.liftAction = liftAction;\nexports.liftReducerWith = liftReducerWith;\nexports.unliftState = unliftState;\nexports.unliftStore = unliftStore;\nexports.default = instrument;\n\nvar _difference = require('lodash/difference');\n\nvar _difference2 = _interopRequireDefault(_difference);\n\nvar _union = require('lodash/union');\n\nvar _union2 = _interopRequireDefault(_union);\n\nvar _isPlainObject = require('lodash/isPlainObject');\n\nvar _isPlainObject2 = _interopRequireDefault(_isPlainObject);\n\nvar _symbolObservable = require('symbol-observable');\n\nvar _symbolObservable2 = _interopRequireDefault(_symbolObservable);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ActionTypes = exports.ActionTypes = {\n  PERFORM_ACTION: 'PERFORM_ACTION',\n  RESET: 'RESET',\n  ROLLBACK: 'ROLLBACK',\n  COMMIT: 'COMMIT',\n  SWEEP: 'SWEEP',\n  TOGGLE_ACTION: 'TOGGLE_ACTION',\n  SET_ACTIONS_ACTIVE: 'SET_ACTIONS_ACTIVE',\n  JUMP_TO_STATE: 'JUMP_TO_STATE',\n  JUMP_TO_ACTION: 'JUMP_TO_ACTION',\n  REORDER_ACTION: 'REORDER_ACTION',\n  IMPORT_STATE: 'IMPORT_STATE',\n  LOCK_CHANGES: 'LOCK_CHANGES',\n  PAUSE_RECORDING: 'PAUSE_RECORDING'\n};\n\n/**\n * Action creators to change the History state.\n */\nvar ActionCreators = exports.ActionCreators = {\n  performAction: function performAction(action) {\n    if (!(0, _isPlainObject2.default)(action)) {\n      throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');\n    }\n\n    if (typeof action.type === 'undefined') {\n      throw new Error('Actions may not have an undefined \"type\" property. ' + 'Have you misspelled a constant?');\n    }\n\n    return { type: ActionTypes.PERFORM_ACTION, action: action, timestamp: Date.now() };\n  },\n  reset: function reset() {\n    return { type: ActionTypes.RESET, timestamp: Date.now() };\n  },\n  rollback: function rollback() {\n    return { type: ActionTypes.ROLLBACK, timestamp: Date.now() };\n  },\n  commit: function commit() {\n    return { type: ActionTypes.COMMIT, timestamp: Date.now() };\n  },\n  sweep: function sweep() {\n    return { type: ActionTypes.SWEEP };\n  },\n  toggleAction: function toggleAction(id) {\n    return { type: ActionTypes.TOGGLE_ACTION, id: id };\n  },\n  setActionsActive: function setActionsActive(start, end) {\n    var active = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];\n\n    return { type: ActionTypes.SET_ACTIONS_ACTIVE, start: start, end: end, active: active };\n  },\n  reorderAction: function reorderAction(actionId, beforeActionId) {\n    return { type: ActionTypes.REORDER_ACTION, actionId: actionId, beforeActionId: beforeActionId };\n  },\n  jumpToState: function jumpToState(index) {\n    return { type: ActionTypes.JUMP_TO_STATE, index: index };\n  },\n  jumpToAction: function jumpToAction(actionId) {\n    return { type: ActionTypes.JUMP_TO_ACTION, actionId: actionId };\n  },\n  importState: function importState(nextLiftedState, noRecompute) {\n    return { type: ActionTypes.IMPORT_STATE, nextLiftedState: nextLiftedState, noRecompute: noRecompute };\n  },\n  lockChanges: function lockChanges(status) {\n    return { type: ActionTypes.LOCK_CHANGES, status: status };\n  },\n  pauseRecording: function pauseRecording(status) {\n    return { type: ActionTypes.PAUSE_RECORDING, status: status };\n  }\n};\n\nvar INIT_ACTION = exports.INIT_ACTION = { type: '@@INIT' };\n\n/**\n * Computes the next entry with exceptions catching.\n */\nfunction computeWithTryCatch(reducer, action, state) {\n  var nextState = state;\n  var nextError = void 0;\n  try {\n    nextState = reducer(state, action);\n  } catch (err) {\n    nextError = err.toString();\n    if ((typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object' && (typeof window.chrome !== 'undefined' || typeof window.process !== 'undefined' && window.process.type === 'renderer')) {\n      // In Chrome, rethrowing provides better source map support\n      setTimeout(function () {\n        throw err;\n      });\n    } else {\n      console.error(err);\n    }\n  }\n\n  return {\n    state: nextState,\n    error: nextError\n  };\n}\n\n/**\n * Computes the next entry in the log by applying an action.\n */\nfunction computeNextEntry(reducer, action, state, shouldCatchErrors) {\n  if (!shouldCatchErrors) {\n    return { state: reducer(state, action) };\n  }\n  return computeWithTryCatch(reducer, action, state);\n}\n\n/**\n * Runs the reducer on invalidated actions to get a fresh computation log.\n */\nfunction recomputeStates(computedStates, minInvalidatedStateIndex, reducer, committedState, actionsById, stagedActionIds, skippedActionIds, shouldCatchErrors) {\n  // Optimization: exit early and return the same reference\n  // if we know nothing could have changed.\n  if (!computedStates || minInvalidatedStateIndex === -1 || minInvalidatedStateIndex >= computedStates.length && computedStates.length === stagedActionIds.length) {\n    return computedStates;\n  }\n\n  var nextComputedStates = computedStates.slice(0, minInvalidatedStateIndex);\n  for (var i = minInvalidatedStateIndex; i < stagedActionIds.length; i++) {\n    var actionId = stagedActionIds[i];\n    var action = actionsById[actionId].action;\n\n    var previousEntry = nextComputedStates[i - 1];\n    var previousState = previousEntry ? previousEntry.state : committedState;\n\n    var shouldSkip = skippedActionIds.indexOf(actionId) > -1;\n    var entry = void 0;\n    if (shouldSkip) {\n      entry = previousEntry;\n    } else {\n      if (shouldCatchErrors && previousEntry && previousEntry.error) {\n        entry = {\n          state: previousState,\n          error: 'Interrupted by an error up the chain'\n        };\n      } else {\n        entry = computeNextEntry(reducer, action, previousState, shouldCatchErrors);\n      }\n    }\n    nextComputedStates.push(entry);\n  }\n\n  return nextComputedStates;\n}\n\n/**\n * Lifts an app's action into an action on the lifted store.\n */\nfunction liftAction(action) {\n  return ActionCreators.performAction(action);\n}\n\n/**\n * Creates a history state reducer from an app's reducer.\n */\nfunction liftReducerWith(reducer, initialCommittedState, monitorReducer, options) {\n  var initialLiftedState = {\n    monitorState: monitorReducer(undefined, {}),\n    nextActionId: 1,\n    actionsById: { 0: liftAction(INIT_ACTION) },\n    stagedActionIds: [0],\n    skippedActionIds: [],\n    committedState: initialCommittedState,\n    currentStateIndex: 0,\n    computedStates: [],\n    isLocked: options.shouldStartLocked === true,\n    isPaused: options.shouldRecordChanges === false\n  };\n\n  /**\n   * Manages how the history actions modify the history state.\n   */\n  return function (liftedState, liftedAction) {\n    var _ref = liftedState || initialLiftedState;\n\n    var monitorState = _ref.monitorState;\n    var actionsById = _ref.actionsById;\n    var nextActionId = _ref.nextActionId;\n    var stagedActionIds = _ref.stagedActionIds;\n    var skippedActionIds = _ref.skippedActionIds;\n    var committedState = _ref.committedState;\n    var currentStateIndex = _ref.currentStateIndex;\n    var computedStates = _ref.computedStates;\n    var isLocked = _ref.isLocked;\n    var isPaused = _ref.isPaused;\n\n\n    if (!liftedState) {\n      // Prevent mutating initialLiftedState\n      actionsById = _extends({}, actionsById);\n    }\n\n    function commitExcessActions(n) {\n      // Auto-commits n-number of excess actions.\n      var excess = n;\n      var idsToDelete = stagedActionIds.slice(1, excess + 1);\n\n      for (var i = 0; i < idsToDelete.length; i++) {\n        if (computedStates[i + 1].error) {\n          // Stop if error is found. Commit actions up to error.\n          excess = i;\n          idsToDelete = stagedActionIds.slice(1, excess + 1);\n          break;\n        } else {\n          delete actionsById[idsToDelete[i]];\n        }\n      }\n\n      skippedActionIds = skippedActionIds.filter(function (id) {\n        return idsToDelete.indexOf(id) === -1;\n      });\n      stagedActionIds = [0].concat(stagedActionIds.slice(excess + 1));\n      committedState = computedStates[excess].state;\n      computedStates = computedStates.slice(excess);\n      currentStateIndex = currentStateIndex > excess ? currentStateIndex - excess : 0;\n    }\n\n    function computePausedAction(shouldInit) {\n      var _extends2;\n\n      var computedState = void 0;\n      if (shouldInit) {\n        computedState = computedStates[currentStateIndex];\n        monitorState = monitorReducer(monitorState, liftedAction);\n      } else {\n        computedState = computeNextEntry(reducer, liftedAction.action, computedStates[currentStateIndex].state, false);\n      }\n      if (!options.pauseActionType || nextActionId === 1) {\n        return {\n          monitorState: monitorState,\n          actionsById: { 0: liftAction(INIT_ACTION) },\n          nextActionId: 1,\n          stagedActionIds: [0],\n          skippedActionIds: [],\n          committedState: computedState.state,\n          currentStateIndex: 0,\n          computedStates: [computedState],\n          isLocked: isLocked,\n          isPaused: true\n        };\n      }\n      if (shouldInit) {\n        if (currentStateIndex === stagedActionIds.length - 1) {\n          currentStateIndex++;\n        }\n        stagedActionIds = [].concat(stagedActionIds, [nextActionId]);\n        nextActionId++;\n      }\n      return {\n        monitorState: monitorState,\n        actionsById: _extends({}, actionsById, (_extends2 = {}, _extends2[nextActionId - 1] = liftAction({ type: options.pauseActionType }), _extends2)),\n        nextActionId: nextActionId,\n        stagedActionIds: stagedActionIds,\n        skippedActionIds: skippedActionIds,\n        committedState: committedState,\n        currentStateIndex: currentStateIndex,\n        computedStates: [].concat(computedStates.slice(0, stagedActionIds.length - 1), [computedState]),\n        isLocked: isLocked,\n        isPaused: true\n      };\n    }\n\n    // By default, agressively recompute every state whatever happens.\n    // This has O(n) performance, so we'll override this to a sensible\n    // value whenever we feel like we don't have to recompute the states.\n    var minInvalidatedStateIndex = 0;\n\n    switch (liftedAction.type) {\n      case ActionTypes.PERFORM_ACTION:\n        {\n          if (isLocked) return liftedState || initialLiftedState;\n          if (isPaused) return computePausedAction();\n\n          // Auto-commit as new actions come in.\n          if (options.maxAge && stagedActionIds.length === options.maxAge) {\n            commitExcessActions(1);\n          }\n\n          if (currentStateIndex === stagedActionIds.length - 1) {\n            currentStateIndex++;\n          }\n          var actionId = nextActionId++;\n          // Mutation! This is the hottest path, and we optimize on purpose.\n          // It is safe because we set a new key in a cache dictionary.\n          actionsById[actionId] = liftedAction;\n          stagedActionIds = [].concat(stagedActionIds, [actionId]);\n          // Optimization: we know that only the new action needs computing.\n          minInvalidatedStateIndex = stagedActionIds.length - 1;\n          break;\n        }\n      case ActionTypes.RESET:\n        {\n          // Get back to the state the store was created with.\n          actionsById = { 0: liftAction(INIT_ACTION) };\n          nextActionId = 1;\n          stagedActionIds = [0];\n          skippedActionIds = [];\n          committedState = initialCommittedState;\n          currentStateIndex = 0;\n          computedStates = [];\n          break;\n        }\n      case ActionTypes.COMMIT:\n        {\n          // Consider the last committed state the new starting point.\n          // Squash any staged actions into a single committed state.\n          actionsById = { 0: liftAction(INIT_ACTION) };\n          nextActionId = 1;\n          stagedActionIds = [0];\n          skippedActionIds = [];\n          committedState = computedStates[currentStateIndex].state;\n          currentStateIndex = 0;\n          computedStates = [];\n          break;\n        }\n      case ActionTypes.ROLLBACK:\n        {\n          // Forget about any staged actions.\n          // Start again from the last committed state.\n          actionsById = { 0: liftAction(INIT_ACTION) };\n          nextActionId = 1;\n          stagedActionIds = [0];\n          skippedActionIds = [];\n          currentStateIndex = 0;\n          computedStates = [];\n          break;\n        }\n      case ActionTypes.TOGGLE_ACTION:\n        {\n          var _ret = function () {\n            // Toggle whether an action with given ID is skipped.\n            // Being skipped means it is a no-op during the computation.\n            var actionId = liftedAction.id;\n\n            var index = skippedActionIds.indexOf(actionId);\n            if (index === -1) {\n              skippedActionIds = [actionId].concat(skippedActionIds);\n            } else {\n              skippedActionIds = skippedActionIds.filter(function (id) {\n                return id !== actionId;\n              });\n            }\n            // Optimization: we know history before this action hasn't changed\n            minInvalidatedStateIndex = stagedActionIds.indexOf(actionId);\n            return 'break';\n          }();\n\n          if (_ret === 'break') break;\n        }\n      case ActionTypes.SET_ACTIONS_ACTIVE:\n        {\n          // Toggle whether an action with given ID is skipped.\n          // Being skipped means it is a no-op during the computation.\n          var start = liftedAction.start;\n          var end = liftedAction.end;\n          var active = liftedAction.active;\n\n          var actionIds = [];\n          for (var i = start; i < end; i++) {\n            actionIds.push(i);\n          }if (active) {\n            skippedActionIds = (0, _difference2.default)(skippedActionIds, actionIds);\n          } else {\n            skippedActionIds = (0, _union2.default)(skippedActionIds, actionIds);\n          }\n\n          // Optimization: we know history before this action hasn't changed\n          minInvalidatedStateIndex = stagedActionIds.indexOf(start);\n          break;\n        }\n      case ActionTypes.JUMP_TO_STATE:\n        {\n          // Without recomputing anything, move the pointer that tell us\n          // which state is considered the current one. Useful for sliders.\n          currentStateIndex = liftedAction.index;\n          // Optimization: we know the history has not changed.\n          minInvalidatedStateIndex = Infinity;\n          break;\n        }\n      case ActionTypes.JUMP_TO_ACTION:\n        {\n          // Jumps to a corresponding state to a specific action.\n          // Useful when filtering actions.\n          var _index = stagedActionIds.indexOf(liftedAction.actionId);\n          if (_index !== -1) currentStateIndex = _index;\n          minInvalidatedStateIndex = Infinity;\n          break;\n        }\n      case ActionTypes.SWEEP:\n        {\n          // Forget any actions that are currently being skipped.\n          stagedActionIds = (0, _difference2.default)(stagedActionIds, skippedActionIds);\n          skippedActionIds = [];\n          currentStateIndex = Math.min(currentStateIndex, stagedActionIds.length - 1);\n          break;\n        }\n      case ActionTypes.REORDER_ACTION:\n        {\n          // Recompute actions in a new order.\n          var _actionId = liftedAction.actionId;\n          var idx = stagedActionIds.indexOf(_actionId);\n          // do nothing in case the action is already removed or trying to move the first action\n          if (idx < 1) break;\n          var beforeActionId = liftedAction.beforeActionId;\n          var newIdx = stagedActionIds.indexOf(beforeActionId);\n          if (newIdx < 1) {\n            // move to the beginning or to the end\n            var count = stagedActionIds.length;\n            newIdx = beforeActionId > stagedActionIds[count - 1] ? count : 1;\n          }\n          var diff = idx - newIdx;\n\n          if (diff > 0) {\n            // move left\n            stagedActionIds = [].concat(stagedActionIds.slice(0, newIdx), [_actionId], stagedActionIds.slice(newIdx, idx), stagedActionIds.slice(idx + 1));\n            minInvalidatedStateIndex = newIdx;\n          } else if (diff < 0) {\n            // move right\n            stagedActionIds = [].concat(stagedActionIds.slice(0, idx), stagedActionIds.slice(idx + 1, newIdx), [_actionId], stagedActionIds.slice(newIdx));\n            minInvalidatedStateIndex = idx;\n          }\n          break;\n        }\n      case ActionTypes.IMPORT_STATE:\n        {\n          if (Array.isArray(liftedAction.nextLiftedState)) {\n            // recompute array of actions\n            actionsById = { 0: liftAction(INIT_ACTION) };\n            nextActionId = 1;\n            stagedActionIds = [0];\n            skippedActionIds = [];\n            currentStateIndex = liftedAction.nextLiftedState.length;\n            computedStates = [];\n            committedState = liftedAction.preloadedState;\n            minInvalidatedStateIndex = 0;\n            // iterate through actions\n            liftedAction.nextLiftedState.forEach(function (action) {\n              actionsById[nextActionId] = liftAction(action);\n              stagedActionIds.push(nextActionId);\n              nextActionId++;\n            });\n          } else {\n            var _liftedAction$nextLif = liftedAction.nextLiftedState;\n            // Completely replace everything.\n\n            monitorState = _liftedAction$nextLif.monitorState;\n            actionsById = _liftedAction$nextLif.actionsById;\n            nextActionId = _liftedAction$nextLif.nextActionId;\n            stagedActionIds = _liftedAction$nextLif.stagedActionIds;\n            skippedActionIds = _liftedAction$nextLif.skippedActionIds;\n            committedState = _liftedAction$nextLif.committedState;\n            currentStateIndex = _liftedAction$nextLif.currentStateIndex;\n            computedStates = _liftedAction$nextLif.computedStates;\n\n\n            if (liftedAction.noRecompute) {\n              minInvalidatedStateIndex = Infinity;\n            }\n          }\n\n          break;\n        }\n      case ActionTypes.LOCK_CHANGES:\n        {\n          isLocked = liftedAction.status;\n          minInvalidatedStateIndex = Infinity;\n          break;\n        }\n      case ActionTypes.PAUSE_RECORDING:\n        {\n          isPaused = liftedAction.status;\n          if (isPaused) {\n            return computePausedAction(true);\n          }\n          // Commit when unpausing\n          actionsById = { 0: liftAction(INIT_ACTION) };\n          nextActionId = 1;\n          stagedActionIds = [0];\n          skippedActionIds = [];\n          committedState = computedStates[currentStateIndex].state;\n          currentStateIndex = 0;\n          computedStates = [];\n          break;\n        }\n      case '@@redux/INIT':\n        {\n          if (options.shouldHotReload === false) {\n            actionsById = { 0: liftAction(INIT_ACTION) };\n            nextActionId = 1;\n            stagedActionIds = [0];\n            skippedActionIds = [];\n            committedState = computedStates.length === 0 ? initialCommittedState : computedStates[currentStateIndex].state;\n            currentStateIndex = 0;\n            computedStates = [];\n          }\n\n          // Recompute states on hot reload and init.\n          minInvalidatedStateIndex = 0;\n\n          if (options.maxAge && stagedActionIds.length > options.maxAge) {\n            // States must be recomputed before committing excess.\n            computedStates = recomputeStates(computedStates, minInvalidatedStateIndex, reducer, committedState, actionsById, stagedActionIds, skippedActionIds, options.shouldCatchErrors);\n\n            commitExcessActions(stagedActionIds.length - options.maxAge);\n\n            // Avoid double computation.\n            minInvalidatedStateIndex = Infinity;\n          }\n\n          break;\n        }\n      default:\n        {\n          // If the action is not recognized, it's a monitor action.\n          // Optimization: a monitor action can't change history.\n          minInvalidatedStateIndex = Infinity;\n          break;\n        }\n    }\n\n    computedStates = recomputeStates(computedStates, minInvalidatedStateIndex, reducer, committedState, actionsById, stagedActionIds, skippedActionIds, options.shouldCatchErrors);\n    monitorState = monitorReducer(monitorState, liftedAction);\n    return {\n      monitorState: monitorState,\n      actionsById: actionsById,\n      nextActionId: nextActionId,\n      stagedActionIds: stagedActionIds,\n      skippedActionIds: skippedActionIds,\n      committedState: committedState,\n      currentStateIndex: currentStateIndex,\n      computedStates: computedStates,\n      isLocked: isLocked,\n      isPaused: isPaused\n    };\n  };\n}\n\n/**\n * Provides an app's view into the state of the lifted store.\n */\nfunction unliftState(liftedState) {\n  var computedStates = liftedState.computedStates;\n  var currentStateIndex = liftedState.currentStateIndex;\n  var state = computedStates[currentStateIndex].state;\n\n  return state;\n}\n\n/**\n * Provides an app's view into the lifted store.\n */\nfunction unliftStore(liftedStore, liftReducer) {\n  var _extends3;\n\n  var lastDefinedState = void 0;\n\n  function getState() {\n    var state = unliftState(liftedStore.getState());\n    if (state !== undefined) {\n      lastDefinedState = state;\n    }\n    return lastDefinedState;\n  }\n\n  return _extends({}, liftedStore, (_extends3 = {\n\n    liftedStore: liftedStore,\n\n    dispatch: function dispatch(action) {\n      liftedStore.dispatch(liftAction(action));\n      return action;\n    },\n\n\n    getState: getState,\n\n    replaceReducer: function replaceReducer(nextReducer) {\n      liftedStore.replaceReducer(liftReducer(nextReducer));\n    }\n  }, _extends3[_symbolObservable2.default] = function () {\n    return _extends({}, liftedStore[_symbolObservable2.default](), {\n      subscribe: function subscribe(observer) {\n        if ((typeof observer === 'undefined' ? 'undefined' : _typeof(observer)) !== 'object') {\n          throw new TypeError('Expected the observer to be an object.');\n        }\n\n        function observeState() {\n          if (observer.next) {\n            observer.next(getState());\n          }\n        }\n\n        observeState();\n        var unsubscribe = liftedStore.subscribe(observeState);\n        return { unsubscribe: unsubscribe };\n      }\n    });\n  }, _extends3));\n}\n\n/**\n * Redux instrumentation store enhancer.\n */\nfunction instrument() {\n  var monitorReducer = arguments.length <= 0 || arguments[0] === undefined ? function () {\n    return null;\n  } : arguments[0];\n  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n  /* eslint-disable no-eq-null */\n  if (options.maxAge != null && options.maxAge < 2) {\n    /* eslint-enable */\n    throw new Error('DevTools.instrument({ maxAge }) option, if specified, ' + 'may not be less than 2.');\n  }\n\n  return function (createStore) {\n    return function (reducer, initialState, enhancer) {\n\n      function liftReducer(r) {\n        if (typeof r !== 'function') {\n          if (r && typeof r.default === 'function') {\n            throw new Error('Expected the reducer to be a function. ' + 'Instead got an object with a \"default\" field. ' + 'Did you pass a module instead of the default export? ' + 'Try passing require(...).default instead.');\n          }\n          throw new Error('Expected the reducer to be a function.');\n        }\n        return liftReducerWith(r, initialState, monitorReducer, options);\n      }\n\n      var liftedStore = createStore(liftReducer(reducer), enhancer);\n      if (liftedStore.liftedStore) {\n        throw new Error('DevTools instrumentation should not be applied more than once. ' + 'Check your store configuration.');\n      }\n\n      return unliftStore(liftedStore, liftReducer);\n    };\n  };\n}"},"hash":"2f80d0d52102e2461ec5ed16af1c5953"}